#!/usr/bin/env python

import os
import sys
import shutil
import urllib

from distutils.dir_util import mkpath

import click

import hokusai
from hokusai.common import *

@click.group()
def cli():
    pass

@cli.command()
@click.option('--project-name', type=click.STRING, default=os.path.basename(os.getcwd()), help='The project name (default: name of current directory)')
@click.option('--aws-account-id', type=click.STRING, required=True, help='Your AWS account ID')
@click.option('--aws-ecr-region', type=click.STRING, default='us-east-1', help='Your AWS ECR region (default: us-east-1)')
@click.option('--framework', type=click.Choice(['rack', 'nodejs']), required=True, help='The project framework')
@click.option('--base-image', type=click.STRING, required=True, help='The base image')
@click.option('--run-command', type=click.STRING, help='Override the default run command')
@click.option('--development-command', type=click.STRING, help='Override the default development command')
@click.option('--test-command', type=click.STRING, help='Override the default test command')
@click.option('--port', type=click.INT, default=8080, help='The port to access on the host machine (default: 8080)')
@click.option('--target-port', type=click.INT, default=80, help='The port to expose on the app container (default: 80)')
@click.option('--with-memcached', type=click.BOOL, is_flag=True, help='Include a Memcached service')
@click.option('--with-redis', type=click.BOOL, is_flag=True, help='Include a Redis service')
@click.option('--with-mongo', type=click.BOOL, is_flag=True, help='Include a MongoDB service')
@click.option('--with-postgres', type=click.BOOL, is_flag=True, help='Include a Postgres service')
def init(project_name, aws_account_id, aws_ecr_region, framework, base_image,
          run_command, development_command, test_command, port, target_port,
            with_memcached, with_redis, with_mongo, with_postgres):
  """
  Configure Hokusai for the current project
  """
  hokusai.init(project_name, aws_account_id, aws_ecr_region, framework, base_image,
                run_command, development_command, test_command, port, target_port,
                  with_memcached, with_redis, with_mongo, with_postgres)

@cli.command()
@click.option('--interactive', type=click.BOOL, is_flag=True, help='Interactive console to install missing dependencies')
def check(interactive):
  """
  Check hokusai dependencies and configuration
  """
  sys.exit(hokusai.check(interactive))

@cli.command()
def dev():
  """
  Boot the development stack
  """
  sys.exit(hokusai.development())

@cli.command()
def test():
  """
  Boot the test stack and run the test suite
  """
  sys.exit(hokusai.test())

@cli.command()
def build():
  """
  Build the latest docker image for the project
  """
  sys.exit(hokusai.build())

@cli.command()
def pull():
  """
  Pull all images and tags from the ECR
  """
  sys.exit(hokusai.pull())

@cli.command()
@click.argument('tag', type=click.STRING)
@click.option('--test-build', type=click.BOOL, is_flag=True, help="Push the latest image output by 'test' - otherwise the latest image output by 'build'")
def push(tag, test_build):
  """
  Push a docker image to ECR with the given tag
  """
  sys.exit(hokusai.push(tag, test_build))

@cli.command()
def images():
  """
  Show images and tags
  """
  sys.exit(hokusai.images())

@cli.command()
@click.argument('context', type=click.STRING)
@click.argument('key', type=click.STRING)
@click.argument('value', type=click.STRING)
def add_secret(context, key, value):
  """
  Add a secret for the given context
  """
  sys.exit(hokusai.add_secret(context, key, value))

@cli.command()
@click.argument('action', type=click.STRING)
@click.argument('context', type=click.STRING)
def stack(action, context):
  """
  Actions:\n
  up - Create / Update the stack in the given context\n
  down - Delete the stack in the given context\n
  status - Print the stack status in the given context
  """
  if action == 'up':
    sys.exit(hokusai.stack_up(context))
  elif action == 'down':
    sys.exit(hokusai.stack_down(context))
  elif action == 'status':
    sys.exit(hokusai.stack_status(context))
  else:
    print_red("ERROR: invalid stack action %s" % action)
    sys.exit(-1)

@cli.command()
@click.argument('context', type=click.STRING)
@click.argument('tag', type=click.STRING)
def deploy(context, tag):
  """
  Deploy an image tag to the given context and update context tag to reference that image
  """
  sys.exit(hokusai.deploy(context, tag))

@cli.command()
@click.argument('context', type=click.STRING)
@click.option('--shell', type=click.STRING, default='bash', help='The shell to run (defaults to bash)')
@click.option('--env', type=click.STRING, multiple=True, help='Environment variables in the form of "KEY=VALUE"')
def console(context, shell, env):
  """
  Launch a new container and attach a shell in the given context
  """
  sys.exit(hokusai.console(context, shell, env))

@cli.command()
@click.argument('context', type=click.STRING)
@click.argument('command', type=click.STRING)
@click.option('--env', type=click.STRING, multiple=True, help='Environment variables in the form of "KEY=VALUE"')
def run(context, command, env):
  """
  Launch a new container and run a command in the given context
  """
  sys.exit(hokusai.run(context, command, env))

if __name__ == '__main__':
  cli(obj={})
