#!/usr/bin/env python

import os
import sys

import click

import hokusai
from hokusai.common import print_red, set_output

CONTEXT_SETTINGS = {
  'max_content_width': 120,
  'help_option_names': ['-h', '--help']
}

@click.group()
def cli():
    pass

@cli.command(context_settings=CONTEXT_SETTINGS)
@click.option('--kubectl-version', type=click.STRING, default='1.5.2')
@click.option('--platform', type=click.STRING, default='darwin')
@click.option('--install-to', type=click.STRING, default='/usr/local/bin')
@click.option('--install-kubeconfig-to', type=click.STRING, default=os.path.join(os.environ.get('HOME'), '.kube'))
@click.option('--s3-bucket', type=click.STRING, required=True, help="The S3 bucket name containing your org's kubectl config file")
@click.option('--s3-key', type=click.STRING, required=True, help="The S3 key of your org's kubectl config file")
@click.option('--s3-bucket-region', type=click.STRING, default='us-east-1', help="The S3 bucket region")
def deps(kubectl_version, platform, install_to, install_kubeconfig_to, s3_bucket, s3_key, s3_bucket_region):
  """
  Install and configure kubectl
  """
  hokusai.dependencies(kubectl_version, platform, install_to, install_kubeconfig_to, s3_bucket, s3_key, s3_bucket_region)

@cli.command(context_settings=CONTEXT_SETTINGS)
@click.option('--aws-account-id', type=click.STRING, required=True, envvar='AWS_ACCOUNT_ID', help='Your AWS account ID (default: $AWS_ACCOUNT_ID')
@click.option('--framework', type=click.Choice(['rack', 'nodejs', 'elixir']), required=True, help='The project framework')
@click.option('--project-name', type=click.STRING, default=os.path.basename(os.getcwd()), help='The project name (default: name of current directory)')
@click.option('--aws-ecr-region', type=click.STRING, default='us-east-1', envvar='AWS_DEFAULT_REGION', help='Your AWS ECR region (default: $AWS_REGION or \'us-east-1\')')
@click.option('--port', type=click.INT, default=80, help='The port of the service (default: 80)')
@click.option('--with-memcached', type=click.BOOL, is_flag=True, help='Include a Memcached service')
@click.option('--with-redis', type=click.BOOL, is_flag=True, help='Include a Redis service')
@click.option('--with-mongodb', type=click.BOOL, is_flag=True, help='Include a MongoDB service')
@click.option('--with-postgres', type=click.BOOL, is_flag=True, help='Include a Postgres service')
@click.option('--with-rabbitmq', type=click.BOOL, is_flag=True, help='Include a RabbitMQ service')
def setup(aws_account_id, framework, project_name, aws_ecr_region, port,
          with_memcached, with_redis, with_mongodb, with_postgres, with_rabbitmq):
  """
  Set up Hokusai for the current project
  """
  hokusai.setup(aws_account_id, framework, project_name, aws_ecr_region, port,
                with_memcached, with_redis, with_mongodb, with_postgres, with_rabbitmq)

@cli.command(context_settings=CONTEXT_SETTINGS)
def check():
  """
  Check hokusai dependencies and configuration
  """
  hokusai.check()

@cli.command(context_settings=CONTEXT_SETTINGS)
@click.option('--skip-build', type=click.BOOL, is_flag=True, help='Do not build the project while launching the stack')
@click.option('-v', '--verbose', type=click.BOOL, is_flag=True, help='Verbose output')
def dev(skip_build, verbose):
  """
  Boot the development stack
  """
  set_output(verbose)
  hokusai.development(skip_build)

@cli.command(context_settings=CONTEXT_SETTINGS)
@click.option('-v', '--verbose', type=click.BOOL, is_flag=True, help='Verbose output')
def test(verbose):
  """Boot the test stack and run the test suite

  Return the exit code of the container with the name 'project-name' in hokusai/config.yml"""
  set_output(verbose)
  hokusai.test()

@cli.command(context_settings=CONTEXT_SETTINGS)
@click.argument('tag', type=click.STRING)
@click.option('-v', '--verbose', type=click.BOOL, is_flag=True, help='Verbose output')
def push(tag, verbose):
  """
  Build the project and push the image to the project repo with the given tag
  """
  set_output(verbose)
  hokusai.push(tag)

@cli.command(context_settings=CONTEXT_SETTINGS)
@click.option('-v', '--verbose', type=click.BOOL, is_flag=True, help='Verbose output')
def tags(verbose):
  """
  Show image tags in the project repo
  """
  set_output(verbose)
  hokusai.tags()

@cli.command(context_settings=CONTEXT_SETTINGS)
@click.argument('action', type=click.STRING)
@click.argument('context', type=click.STRING)
@click.argument('secret', type=click.STRING, nargs=-1)
@click.option('-v', '--verbose', type=click.BOOL, is_flag=True, help='Verbose output')
def secrets(action, context, secret, verbose):
  """Actions: [get|set|unset]

  get - print secrets in the kubectl {CONTEXT}

  set - set {SECRET} in the kubectl {CONTEXT} - each {SECRET} must be in of form 'KEY=VALUE'

  unset - Unset {SECRET} from the kubectl {CONTEXT} - each {SECRET} must be of the form 'KEY'"""
  set_output(verbose)
  if action == 'get':
    hokusai.get_secrets(context)
  elif action == 'set':
    hokusai.set_secrets(context, secret)
  elif action == 'unset':
    hokusai.unset_secrets(context, secret)
  else:
    print_red("Error: Invalid action %s" % action)
    sys.exit(-1)

@cli.command(context_settings=CONTEXT_SETTINGS)
@click.argument('action', type=click.STRING)
@click.argument('context', type=click.STRING)
@click.option('-v', '--verbose', type=click.BOOL, is_flag=True, help='Verbose output')
def stack(action, context, verbose):
  """  Actions: [create|update|delete|status]

  create - create the stack in the kubectl {CONTEXT} defined in ./hokusai/{CONTEXT}.yml

  update - update the stack in the kubectl {CONTEXT} defined in ./hokusai/{CONTEXT}.yml

  delete - delete the stack in the kubectl {CONTEXT} defined in ./hokusai/{CONTEXT}.yml

  status - print the stack status in the kubectl {CONTEXT} defined in ./hokusai/{CONTEXT}.yml"""
  set_output(verbose)
  if action == 'create':
    hokusai.stack_create(context)
  elif action == 'update':
    hokusai.stack_update(context)
  elif action == 'delete':
    hokusai.stack_delete(context)
  elif action == 'status':
    hokusai.stack_status(context)
  else:
    print_red("Error: Invalid action %s" % action)
    sys.exit(-1)

@cli.command(context_settings=CONTEXT_SETTINGS)
@click.argument('context', type=click.STRING)
@click.argument('tag', type=click.STRING)
@click.option('-v', '--verbose', type=click.BOOL, is_flag=True, help='Verbose output')
def deploy(context, tag, verbose):
  """
  Deploy an image tag to the kubectl {CONTEXT}
  and update the tag named {CONTEXT} to reference that tag
  """
  set_output(verbose)
  hokusai.deploy(context, tag)

@cli.command(context_settings=CONTEXT_SETTINGS)
@click.argument('from-context', type=click.STRING)
@click.argument('context', type=click.STRING)
@click.option('-v', '--verbose', type=click.BOOL, is_flag=True, help='Verbose output')
def promote(from_context, context, verbose):
  """
  Update the deployment on {CONTEXT} with the image tag currently deployed on {FROM_CONTEXT}
  and update the tag named {CONTEXT} to reference that tag
  """
  set_output(verbose)
  hokusai.promote(from_context, context)

@cli.command(context_settings=CONTEXT_SETTINGS)
@click.argument('context', type=click.STRING)
@click.argument('command', type=click.STRING)
@click.option('--tty', type=click.BOOL, is_flag=True, help='Attach the terminal')
@click.option('--tag', type=click.STRING, help='The image tag to run (defaults to the value of context)')
@click.option('--env', type=click.STRING, multiple=True, help='Environment variables in the form of "KEY=VALUE"')
@click.option('-v', '--verbose', type=click.BOOL, is_flag=True, help='Verbose output')
def run(context, command, tty, tag, env, verbose):
  """
  Launch a new container and run a command in the kubectl {CONTEXT}
  """
  set_output(verbose)
  hokusai.run(context, command, tty, tag, env)

@cli.command(context_settings=CONTEXT_SETTINGS)
@click.argument('context', type=click.STRING)
@click.option('-t', '--timestamps', type=click.BOOL, is_flag=True, help='Include timestamps')
@click.option('-n', '--nlines', type=click.STRING, help='Num lines to follow')
@click.option('-f', '--follow', type=click.BOOL, is_flag=True, help='Follow logs')
@click.option('-v', '--verbose', type=click.BOOL, is_flag=True, help='Verbose output')
def logs(context, timestamps, nlines, follow, verbose):
  """
  Get container logs from the selected {CONTEXT}
  """
  set_output(verbose)
  hokusai.logs(context, timestamps, nlines, follow)

if __name__ == '__main__':
  cli(obj={})
