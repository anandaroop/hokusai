#!/usr/bin/env python

import os

import click

import hokusai

@click.group()
def cli():
    pass

@cli.command()
@click.option('--framework', type=click.Choice(['rack', 'nodejs']), required=True, help='The project framework')
@click.option('--base-image', type=click.STRING, required=True, help='The base image')
@click.option('--run-command', type=click.STRING, help='Override the default run command')
@click.option('--development-command', type=click.STRING, help='Override the default development command')
@click.option('--test-command', type=click.STRING, help='Override the default test command')
@click.option('--port', type=click.STRING, default='8080', help='The port to access on the host machine')
@click.option('--target-port', type=click.STRING, default='80', help='The port to expose on the app container')
@click.option('--with-memcached', type=click.BOOL, is_flag=True, help='Include a Memcached service')
@click.option('--with-redis', type=click.BOOL, is_flag=True, help='Include a Redis service')
@click.option('--with-mongo', type=click.BOOL, is_flag=True, help='Include a MongoDB service')
@click.option('--with-postgres', type=click.BOOL, is_flag=True, help='Include a Postgres service')
def scaffold(framework, base_image, run_command, development_command, test_command, port, target_port,
              with_memcached, with_redis, with_mongo, with_postgres):
  """
  Initialize a Dockerfile, development.yml and test.yml in the current directory
  """
  hokusai.scaffold(framework, base_image, run_command, development_command, test_command, port, target_port,
                    with_memcached, with_redis, with_mongo, with_postgres)

@cli.command()
@click.option('--docker-compose-yml', type=click.STRING, default=os.path.join(os.getcwd(), 'development.yml'), help='docker-compose development file - defaults to development.yml')
def dev(docker_compose_yml):
  """
  Boot the development stack
  """
  hokusai.development(docker_compose_yml)

@cli.command()
@click.option('--docker-compose-yml', type=click.STRING, default=os.path.join(os.getcwd(), 'test.yml'), help='docker-compose test file - defaults to test.yml')
def test(docker_compose_yml):
  """
  Boot the test stack and run the test suite
  """
  hokusai.test(docker_compose_yml)

@cli.command()
@click.option('--aws-account-id', type=click.STRING, required=True, help='Your AWS account ID')
@click.option('--aws-ecr-region', type=click.STRING, default='us-east-1', help='Your AWS ECR region')
def configure(aws_account_id, aws_ecr_region):
  """
  Configure Hokusai for the current project
  """
  hokusai.configure(aws_account_id, aws_ecr_region)

@cli.command()
@click.argument('key', type=click.STRING)
def config_get(key):
  """
  Get a config value by key and print
  """
  try:
    print hokusai.config_get(key)
  except hokusai.HokusaiConfigError, e:
    print(e.message)

@cli.command()
@click.argument('key', type=click.STRING)
@click.argument('value', type=click.STRING)
def config_set(key, value):
  """
  Set a config key to a given value
  """
  try:
    print "Set %s to %s" % hokusai.config_set(key, value)
  except hokusai.HokusaiConfigError, e:
    print(e.message)

@cli.command()
def build():
  """
  Build and tag a docker image
  """
  try:
    hokusai.build()
  except hokusai.HokusaiConfigError, e:
    print(e.message)

@cli.command()
def latest():
  """
  Show the latest build
  """
  try:
    hokusai.latest()
  except hokusai.HokusaiConfigError, e:
    print(e.message)

if __name__ == '__main__':
    cli(obj={})
